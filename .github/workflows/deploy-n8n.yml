name: n8n Complete CI/CD Pipeline

on:
  workflow_call:
    inputs:
      # CI Configuration
      skip-build:
        description: 'Skip build stage (use existing image)'
        type: boolean
        default: false
      dockerfile-path:
        description: 'Path to Dockerfile'
        type: string
        default: './docker/images/n8n/Dockerfile'
      platforms:
        description: 'Target platforms for build'
        type: string
        default: 'linux/amd64'
      run-tests:
        description: 'Run tests during CI'
        type: boolean
        default: true
      run-security-scan:
        description: 'Run security scan'
        type: boolean
        default: true

      # CD Configuration
      environment:
        description: 'Deployment environment'
        type: string
        default: 'production'
      image-tag:
        description: 'Image tag to deploy (when skip-build=true)'
        type: string
        default: 'latest'
      deployment-path:
        description: 'Server deployment path'
        type: string
        default: '/opt/n8n'
      runner-labels:
        description: 'Runner labels in JSON array format'
        type: string
        default: '["self-hosted"]'
      deploy-only:
        description: 'Only run deployment (skip CI)'
        type: boolean
        default: false
    secrets:
      github-token:
        description: 'GitHub token for registry'
        required: true
      postgres-password:
        description: 'PostgreSQL password'
        required: false

jobs:
  # ============================================
  # DECISION GATE
  # ============================================
  decide:
    name: 🎯 Determine Pipeline Path
    runs-on: ubuntu-latest
    outputs:
      run-ci: ${{ steps.decide.outputs.run-ci }}
      run-cd: ${{ steps.decide.outputs.run-cd }}
      image-to-deploy: ${{ steps.decide.outputs.image }}

    steps:
      - name: Determine pipeline path
        id: decide
        run: |
          echo "🎯 Determining pipeline path..."

          if [[ "${{ inputs.deploy-only }}" == "true" ]]; then
            echo "run-ci=false" >> $GITHUB_OUTPUT
            echo "run-cd=true" >> $GITHUB_OUTPUT
            echo "image=ghcr.io/${{ github.repository_owner }}/n8n:${{ inputs.image-tag }}" >> $GITHUB_OUTPUT
            echo "📦 Deploy-only mode: Will deploy existing image"
          elif [[ "${{ inputs.skip-build }}" == "true" ]]; then
            echo "run-ci=false" >> $GITHUB_OUTPUT
            echo "run-cd=true" >> $GITHUB_OUTPUT
            echo "image=ghcr.io/${{ github.repository_owner }}/n8n:${{ inputs.image-tag }}" >> $GITHUB_OUTPUT
            echo "⏭️ Skip-build mode: Will deploy existing image"
          else
            echo "run-ci=true" >> $GITHUB_OUTPUT
            echo "run-cd=true" >> $GITHUB_OUTPUT
            echo "🔨 Full pipeline: Will build and deploy"
          fi

  # ============================================
  # CI PIPELINE (Build, Test, Scan)
  # ============================================
  ci:
    name: 🔨 CI Pipeline
    needs: decide
    if: needs.decide.outputs.run-ci == 'true'
    uses: ./.github/workflows/ci-build.yml
    with:
      dockerfile-path: ${{ inputs.dockerfile-path }}
      platforms: ${{ inputs.platforms }}
      push-image: true
      run-tests: ${{ inputs.run-tests }}
      run-security-scan: ${{ inputs.run-security-scan }}
      image-name: ${{ github.repository_owner }}/n8n
    secrets:
      registry-token: ${{ secrets.github-token }}

  # ============================================
  # CD PIPELINE (Deploy)
  # ============================================
  cd:
    name: 🚀 CD Pipeline
    needs: [decide, ci]
    if: |
      always() &&
      needs.decide.outputs.run-cd == 'true' &&
      (needs.ci.result == 'success' || needs.ci.result == 'skipped')
    uses: ./.github/workflows/cd-deploy.yml
    with:
      environment: ${{ inputs.environment }}
      image: ${{ needs.ci.outputs.image || needs.decide.outputs.image-to-deploy }}
      deployment-path: ${{ inputs.deployment-path }}
      app-name: n8n
      app-port: '5678'
      postgres-enabled: true
      runner-labels: ${{ inputs.runner-labels }}
      health-check-enabled: true
      rollback-on-failure: ${{ inputs.environment == 'production' }}
    secrets:
      postgres-password: ${{ secrets.postgres-password }}

  # ============================================
  # PIPELINE SUMMARY
  # ============================================
  summary:
    name: 📊 Pipeline Summary
    needs: [ci, cd]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Generate pipeline summary
        run: |
          echo "# 📊 n8n CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # CI Summary
          if [[ "${{ needs.ci.result }}" == "success" ]]; then
            echo "## ✅ CI Pipeline: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "- **Image:** ${{ needs.ci.outputs.image }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Tests:** ${{ needs.ci.outputs.test-status }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Security:** ${{ needs.ci.outputs.scan-status }}" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.ci.result }}" == "skipped" ]]; then
            echo "## ⏭️ CI Pipeline: SKIPPED" >> $GITHUB_STEP_SUMMARY
            echo "Using existing image for deployment" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ CI Pipeline: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # CD Summary
          if [[ "${{ needs.cd.result }}" == "success" ]]; then
            echo "## ✅ CD Pipeline: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
            echo "- **URL:** ${{ needs.cd.outputs.deployment-url }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Status:** ${{ needs.cd.outputs.deployment-status }}" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.cd.result }}" == "skipped" ]]; then
            echo "## ⏭️ CD Pipeline: SKIPPED" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ CD Pipeline: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "Check logs for details" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🕐 Completed at: $(date)" >> $GITHUB_STEP_SUMMARY