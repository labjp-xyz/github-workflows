name: API Generic CI/CD Pipeline

on:
  workflow_call:
    inputs:
      # Application Configuration
      app-name:
        description: 'Application name'
        type: string
        required: true
      app-port:
        description: 'Application port'
        type: string
        required: true

      # CI Configuration
      skip-build:
        description: 'Skip build stage (use existing image)'
        type: boolean
        default: false
      dockerfile-path:
        description: 'Path to Dockerfile'
        type: string
        default: './Dockerfile'
      platforms:
        description: 'Target platforms for build'
        type: string
        default: 'linux/amd64'
      run-tests:
        description: 'Run tests during CI'
        type: boolean
        default: true
      run-security-scan:
        description: 'Run security scan'
        type: boolean
        default: true

      # CD Configuration
      environment:
        description: 'Deployment environment'
        type: string
        default: 'production'
      image-tag:
        description: 'Image tag to deploy (when skip-build=true)'
        type: string
        default: 'latest'
      deployment-path:
        description: 'Server deployment path'
        type: string
        default: '/opt/apps'
      postgres-enabled:
        description: 'Deploy with PostgreSQL'
        type: boolean
        default: false
      runner-labels:
        description: 'Runner labels in JSON array format'
        type: string
        default: '["self-hosted"]'
      deploy-only:
        description: 'Only run deployment (skip CI)'
        type: boolean
        default: false
      deploy-user:
        description: 'User to run deployment'
        type: string
        default: 'n8n-work'
    secrets:
      github-token:
        description: 'GitHub token for registry'
        required: true
      postgres-password:
        description: 'PostgreSQL password (if postgres-enabled)'
        required: false
      app-secrets:
        description: 'Application secrets in JSON format'
        required: false

jobs:
  # ============================================
  # DECISION GATE
  # ============================================
  decide:
    name: 🎯 Pipeline Decision
    runs-on: ubuntu-latest
    outputs:
      run-ci: ${{ steps.decide.outputs.run-ci }}
      run-cd: ${{ steps.decide.outputs.run-cd }}
      image-to-deploy: ${{ steps.decide.outputs.image }}

    steps:
      - name: Determine pipeline path
        id: decide
        run: |
          echo "🎯 Determining pipeline for ${{ inputs.app-name }}..."

          if [[ "${{ inputs.deploy-only }}" == "true" ]]; then
            echo "run-ci=false" >> $GITHUB_OUTPUT
            echo "run-cd=true" >> $GITHUB_OUTPUT
            echo "image=ghcr.io/${{ github.repository_owner }}/${{ inputs.app-name }}:${{ inputs.image-tag }}" >> $GITHUB_OUTPUT
            echo "📦 Deploy-only mode"
          elif [[ "${{ inputs.skip-build }}" == "true" ]]; then
            echo "run-ci=false" >> $GITHUB_OUTPUT
            echo "run-cd=true" >> $GITHUB_OUTPUT
            echo "image=ghcr.io/${{ github.repository_owner }}/${{ inputs.app-name }}:${{ inputs.image-tag }}" >> $GITHUB_OUTPUT
            echo "⏭️ Skip-build mode"
          else
            echo "run-ci=true" >> $GITHUB_OUTPUT
            echo "run-cd=true" >> $GITHUB_OUTPUT
            echo "🔨 Full CI/CD pipeline"
          fi

  # ============================================
  # CI PIPELINE (Generic for any containerized app)
  # ============================================
  ci:
    name: 🔨 CI Pipeline
    needs: decide
    if: needs.decide.outputs.run-ci == 'true'
    uses: ./.github/workflows/ci-generic.yml
    with:
      dockerfile-path: ${{ inputs.dockerfile-path }}
      context: '.'
      platforms: ${{ inputs.platforms }}
      push-image: true
      run-tests: ${{ inputs.run-tests }}
      run-security-scan: ${{ inputs.run-security-scan }}
      image-name: ${{ github.repository_owner }}/${{ inputs.app-name }}
    secrets:
      registry-token: ${{ secrets.github-token }}

  # ============================================
  # CD PIPELINE (Generic deployment)
  # ============================================
  cd:
    name: 🚀 CD Pipeline
    needs: [decide, ci]
    if: |
      always() &&
      needs.decide.outputs.run-cd == 'true' &&
      (needs.ci.result == 'success' || needs.ci.result == 'skipped')
    uses: ./.github/workflows/cd-deploy.yml
    with:
      environment: ${{ inputs.environment }}
      image: ${{ needs.ci.outputs.image || needs.decide.outputs.image-to-deploy }}
      deployment-path: ${{ inputs.deployment-path }}/${{ inputs.app-name }}
      app-name: ${{ inputs.app-name }}
      app-port: ${{ inputs.app-port }}
      postgres-enabled: ${{ inputs.postgres-enabled }}
      runner-labels: ${{ inputs.runner-labels }}
      health-check-enabled: true
      rollback-on-failure: ${{ inputs.environment == 'production' }}
      deploy-user: ${{ inputs.deploy-user }}
    secrets:
      postgres-password: ${{ secrets.postgres-password }}
      app-secrets: ${{ secrets.app-secrets }}

  # ============================================
  # SUMMARY
  # ============================================
  summary:
    name: 📊 Pipeline Summary
    needs: [ci, cd]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Generate summary
        run: |
          echo "# 📊 ${{ inputs.app-name }} Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # CI Summary
          if [[ "${{ needs.ci.result }}" == "success" ]]; then
            echo "## ✅ CI: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "- Image: ${{ needs.ci.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.ci.result }}" == "skipped" ]]; then
            echo "## ⏭️ CI: SKIPPED" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ CI: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          # CD Summary
          if [[ "${{ needs.cd.result }}" == "success" ]]; then
            echo "## ✅ CD: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "- Environment: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
            echo "- URL: ${{ needs.cd.outputs.deployment-url }}" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.cd.result }}" == "skipped" ]]; then
            echo "## ⏭️ CD: SKIPPED" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ CD: FAILED" >> $GITHUB_STEP_SUMMARY
          fi